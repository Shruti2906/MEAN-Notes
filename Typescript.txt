
What is typescript?
Why do we need it?
How is it different from javascript?


Typescript :
	-is a programming language created at microsoft to adress some of the shortcomes of javascript.
	-ts is created on top of javascript.

		"so every javascript file is a valid ts file."

	-ts add some more features to js:
		-static typing
		-code completion
		-refactoring
		-shorthand notations
		
		This features help us build more robust and maintainable application
		in less time.

------------------------------------------------------------------------------------

****	Statically-typed	vs	Dynamically-typed

	
	Statically-typed

		-c, c++, java.
			-we know the type of variable at compile time
		eg.
			int n = 10;
			now n is variable of type int.
			n = "abc" is nto valid


	Dynamically-typed
		-Javascript, Python, Ruby.
		-type of variables is dynamic, so we can change it at runtime.
		 type is determined and change at runtime.
		eg. 
			let n = 10;
			n = "abc";
		
		-This gives us more flexibility, but it will also lead to some problems.
		eg.
			if we pass this variable to a function expecting variable. 
			
				Math.round(number);
------------------------------------------------------------------------------------		

	That is what solved in typescript.
	
	"Typescript is like Javascript with Type Checking".
			
	if we declare 
		let x: number = 10
		x = "a"; //Error in typescript
	
		
	-Everything we can do with Javascript we can do with typescript.
	
------------------------------------------------------------------------------------		

**** Drawbacks 


	-compilation is involved as browsers don't understand typescript code.	

		TypeScript -->  COMPILATION ---> JavasSript

	above process is knows as 'Transpilation'.

	-for Simple Projects JavaScript, 
	 for Medium to large projects TypeScript is Recommended to use.	
	 
============================================================================================

*****   SetUp Development Environment. *****
  
  -We'll use npm to install Typescript compiler.
	
	thus first intall node.
	
	-cmd to install ts compiler globally:
		
			"npm i -g typescript"
		
	-check version of ts compiler installed:
		
			"tsc -v"
		
	-create file say named "index.ts"

	-to compile it 
		
			"node index.ts"
			
		after compilation ".js" file will be generated.
		
--------------------------------------------------------------------------------------		
Es i.e ecma script is 'specification' and 
	JavaScript is 'implementation' of that specification.
--------------------------------------------------------------------------------------		
============================================================================================

**** Configuring the Typescript Compiler ****

	Let's create configuration file for typescript compiler.
	
	-> in terminal type:
	
		"tsc --init"
	
	-> now "tsconfig.json" file will be generated check in file explorer in vs code.


-> tsconfig file :

	tsconfig file contain :
		-most of its code it default commented.
		-target : "es2016" -indicate version of js ts file will generate. 
					we can chnage this value.
		-module : "commonjs"
		-"outDir": "./dist"
		-"removeComments": true,
		-"noEmitOnError": true,

->in terminal, simply type.

	"tsc"

	-this will compile all ts files in this project.

--------------------------------------------------------------------------------------		
============================================================================================

**** Debugging TypeScript Applications ****

->in tsconfig file enable
	"sourceMap": true,

	-sourceMap is a file that specifies how each line of our typescript code
	maps to the generated 
	
->now compile our code once again: 
	"tsc"

->in src folder 
	index.js.map is generated.

------------------------

-> add breakpoint to say 1st line

-> goto debug panel in left side in vs code.(below file explorer icon, source control, extensions icon etc)

-> click on - "create a new .json file"

-> select "node"

-> "launch.json" file will be created.

-> in launch.json file in program add "preLaunchTask"-

	],
            "program": "${workspaceFolder}\\src\\index.ts",
            "preLaunchTask": "tsc: build - tsconfig.json",
            "outFiles": [
                "${workspaceFolder}/**/*.js"
            ]

    with this setting we are telling vs code to use the typescript compiler	
    build our application using this configuration file.

-> in debug panel click "launch program" i.e start debuging.

->
-------------------------------------------------------------------------------------------		
============================================================================================

********************* FUNDAMENTALS ***************************

	-built in type
		-any
		-arrays
		-tuples
		-enums
		-functions
		-objects

-----------------------------
JavaScript built in types:
	-number
	-string
	-booolean
	-null
	-undefined
	-object

TypeScript extends this list and add some more-
	-any
	-unknown
	-never
	-enum
	-tuple
	
---------------------

let sales : number = 123456789;

in Typescript if have large no we can seperate its digit using an underscore.
eg.
	let sales : number = 123_456_789;

that makes code more readable.


->in ts we don't have to annotate type of variable
	eg.
		let sales = 123456789;	//ts will take type of sales as number based on value given to it. 

==========================

##  The "any" Type


	->type "any: represent any kind of value.

	->if we declare a varibale and not asign a value typescript assumes that the type is any.
	eg.
		let level;
	
	   so can set it to a number or a string etc.
		
		let level;
		level = 10;
		level = 'abc'

	The Best Practice is to Avoid Using 'any' type as much as possible.
	
		-as we us ets for type safety so we get cheking so if use the any type,
		 we essentially lose the feature and major 
		 benefit of using ts.

-> see below eg.

	function render(doc){
	    console.log(doc)
	}

	-implicitly type will be considered as any. and ts compiler will give error.
	so we have to specify the type.

	function render(doc : any){
	    console.log(doc)
	}


->in "tsconfig.json" file, in /*type checking*/ uncomment- " "noImplicitAny": true,".

	if this feature is turned on the compiler will complain about miplicit any types.
	
  so let's change it to 'false'

	"noImplicitAny": false,"		
	
  now we can use variable without specifying type as function parameter.
	function render(doc){
	    console.log(doc)
	}

NOTE: but we have to carefull for using this.
	as we'll the major benefit of using typescript that is type checking.

-> so turn it on again:

	"noImplicitAny": true,"	

==========================

##  The "arrays"
	
	this is how we can declare array :-
	
		let numbers = [1, 2, 3];
	
	- in JavaScript each element can be of different type.
	eg
		let numbers = [1, 2, '3']; //is fine.

	but what if we to pass this array to a function expecting list of numbers.
	so, we use TypeScript where we can mention explicityply the type.
	eg.
		let numbers : number[]= [1, 2, '3'];	//now this will give error.
	

==========================

##  The "Tuples"

	-its a fixed length array where each element has particular type.
	-we oftern use them when working with the pair of value.
	eg.
		let user : [number, string] = [1, 'Mosh'];

	-Internally they are represented as a plain JavaScript Array.

	-also below is valid-

		let user : [number, string, number] = [1, 'Mosh', 1];

	tuples are mainly usefull for 2 values.

==========================

##  The "Enums"

	-list of related constants.
	eg.
		enum Sieze {Small=1, med, large};
		enum Size {Small='s', med = 'm', large = "l"};
		let mySize = Size.Small;
	
	-if we write our enum our ts compiler will generate more optimized output(js) code.
	eg.
		const enum Size1 {Small='s', med = 'm', large = "l"};
		let mySize1 = Size1.Small;


==========================

##  The "Functions"
	
	eg.
		function calculateTx(income : number){
 		   return 0;
		}
		-js will infer the return type as number, as we are returning 0.

->we can explicitly mention return type of function:
  eg.
	function calculateTax(income : number): number{
	    //return 0;
	}

->if pass type other than mentioned one :
  eg.
	function calculateTax(income : number): number{
		
		return 'a';
	}

->NOTE: Js by defualt returns "undefined" from our functions.
	
	function calcTax(income : number){
	    if(income < 50_000){
	        return income*1.2;
	    }
	    //undefined
	}

	
    -compiler option to check this type of error, where we forgot to return a 
       value-
		->in "tsconfig.ts" file	
		->in /*Type Checking*/ enable/uncomment
			"noUnusedParameers" : true,
			"noImplicitReturns": true,

	-after turning this option on, now we'll get warnig in below function.			
	
		function calcTax(income : number){
		    if(income < 50_000){
	 	       return income*1.2;
		    }
		    //undefined
		}

-> to detect unused variables in our code.
	->goto	tsconfig.ts and uncomment
		
		"noUnusedLocals": true,

	now we'll get warning for variables that are declared but not used.

-> Js doesn't care how many more number of arguments we are passing.
   eg.
	function calTax(income : number): number{
 	   if(income < 50_000){
        	return income*1.2;
	    }
	    return income*1.3;
	}
	calTax(10, 20, 30);	//NO Error IN JS
	
	->But TypeScript will give error in above code (while calling function).

-> we can use "?" to set variable as optional
   eg.
	function calTax(income : number, taxYear?: number): number{
	    if((taxYear || 2022) < 50_000){
        	return income*1.2;
	    }
	    return income*1.3;
	}
	calTax(10);
	
	or we can also use defualt value.	
	eg.
		function calTax(income : number, taxYear = 2022): number{


==========================

##  The "Objects"

	->in JavaScript Objects are dynamic.
	  so their shape can change throughout lifetime of our program.
	eg.
		let employee = {id: 1}

		employee.name = 'abc';	//valid in Js but NOT in Ts.

->
	let employee : {
		id: number,
		name: string
	} = {id: 1, name: 'abc'}
	
	employee.name = 'abc';


-> we can apply readonly modifier to variables in object.
   eg.
	let employee : {
		readonly id: number,
		name: string
	} = {id: 1, name: 'abc'}

	//employee.id = 1;//error


->we can use function as an attribute of an object.
	let employee : {
 	   readonly id: number,
	   name: string,
	   retire: (date: Date) => void
	   } = {
	    id: 1, 
	    name: 'abc',
	    retire: (date: Date) =>{
        	console.log(date);
	    }
	}

-------------------------------------------------------------------------------------------		
============================================================================================

********************* ADVANCED TYPES ***************************

	-Type aliases
	-Unions & intersections
	-Type narrowing
	-Nullable types
	-The unknown type
	-The never type

==========================

###  The Type "Aliases"

	->We should always use the "DRY" principle.
		"DON'T REPEATE YOURSELF"


	let employee : {
 	   readonly id: number,
	   name: string,
	   retire: (date: Date) => void
	   } = {
	    id: 1, 
	    name: 'abc',
	    retire: (date: Date) =>{
        	console.log(date);
	    }
	}
	
	-when create create new we've to declare all the properties again.
	


->

	type Employee = {
	    readonly id: number,
	    name: string,
	    retire: (date: Date) => void
	}

	let employee : Employee = {
	    id: 1, 
	    name: 'abc',
	    retire: (date: Date) =>{
	    console.log(date);
	    }
	}   

	-now we can create as many objects as we want of type Employee.

 
------------------------------------------------------------------------------------------		
to search :

ecma script




























